[{"content":"Introduction This is a guide to document the creation of a Self-hosted Github runner in a homelab environment. The reason to set up a runner in your homelab is that the runner will enable Github workflows to run scripts and other automation software from the runner. This method demonstrates how to use Proxmox to create a VM and install and configure a Gitlab runner and is for testing purposes only. It is a basic project but I believe it makes you more familiar with Proxmox, setting up VMs and installing and configuring software using the command line.\nBeing comfortable with the command line using either a Linux shell and powershell is a great skill for performing a variety of tasks in different computing environments. A command line is also great as commands can be easily recorded to show how you achieved a task, and these commands can be thrown into a wiki for quick reference material in similar scenarios. Often I fondly remember well explained commands left by admins and developers in a wiki that have worked perfectly a few years after they were initially written.\nThe rough steps for this demonstration is as follows:\nDescribe dependencies Create VM template and VM to use on Proxmox Setup new user in Proxmox Generate and save SSH key for that user to use Create the runner VM Install and configure a Github Runner Run a test workflow Dependencies What components do we need to complete this project?\nProxmox - For starters, I am assuming that you have Proxmox installed (version 8) on a machine somewhere in your homelab. If you don\u0026rsquo;t and would like to set Proxmox up there are a lot of good guides on this subject that will do a better job at running through the initial setup of the Proxmox[1]. I would like to start from a point where Proxmox is alive and kicking, available on a local area network at https://\u0026lt;your proxmox IP\u0026gt;:8006. I am using an old computer to run Proxmox, which has a CPU with 4 cores and 32 GB of RAM and a 1 TB SSD.\nGithub - Having a Github account and test repository is also required for running the Github Workflow and setting up the Github Runner. Github\u0026rsquo;s documentation is a great starting point for understanding Github Workflows and self-hosted runners[3].\nUnix Shell - The only software I need on my local machine to complete this task is an SSH client to access Proxmox. I am going to use the SSH client that comes with Ubuntu on Windows Subsystem for Linux, for this task. Git, or a Git client, is also required for pushing code changes to your Github repository.\nProxmox - Preliminary Configuration For this part I will SSH into the Proxmox host in order to create a VM template that can be used to create Virtual Machines on the Proxmox hypervisor. I find creating the template using the command line is quicker and repeatable than trying to use the Proxmox web interface.\nFirst, I will need a non-root user for creating templates and virtual machines on Proxmox. You can use the root user but I think it is good to have some basic familiarity with how to create Linux users that integrate with the Proxmox service. This knowledge is also useful if you need to create a separate user account for running other automation using Terraform or Ansible. For this project I will create a Linux group called \u0026ldquo;homelabbers\u0026rdquo; and a Linux user called \u0026ldquo;homelab\u0026rdquo;. The Linux group will have Admin privileges on Proxmox and the Linux user will belong to this group, inheriting those permissions.\nThe commands to perform this are given below. To perform these commands you will need to SSH onto the Proxmox server using the root user\u0026rsquo;s credentials.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 # Set the names of the user and group variables. GROUP=homelabbers USER=homelab # Create and configure the Linux/PVE group. groupadd $GROUP pveum groupadd $GROUP -comment \u0026#34;Homelab Admins\u0026#34; pveum acl modify / --roles Administrator --group $GROUP # Create and configure the homelab user, create a password, and associate the user with the homelabbers, sudo and kvm group. useradd -g $GROUP -m $USER usermod -a -G sudo homelab usermod -a -G kvm homelab passwd $USER # prompts for a password. pveum user add $USER@pam pveum user list pveum usermod $USER@pam -group $GROUP As an optional quality of life improvement, modify the sudoers file to grant passwordless access to superuser commands.\n1 2 visudo # change line %sudo ALL=(ALL:ALL) ALL to %sudo ALL=(ALL:ALL) NOPASSWD: ALL The next command creates an SSH key pair and copies the public SSH key to the Proxmox host so you can connect to the machine using the homelab user. The public key is copied to the homelab\u0026rsquo;s home directory using scp. For test environments I like to use separate key pairs so my important SSH keys are not mixed up in test environments.\n1 2 3 4 5 PROXMOX_HOST=192.168.1.10 KEY_NAME=homelab ssh-keygen -t ecdsa -f $KEY_NAME ssh-copy-id -i $KEY_NAME homelab@$PROXMOX_HOST scp -i $KEY_NAME $KEY_NAME.pub homelab@$PROXMOX_HOST:~/ Proxmox - VM Template Creation A VM template is required to make VM clones that are used as the foundation for new Virtual Machines that will run in the homelab Proxmox environment. The following script block installs some dependencies on the Proxmox host and then downloads and sets up a VM template.\nThere is a bit going on in the code block so I have broken it down into two chunks. First, we need to update the package lists on Proxmox to remove the Proxmox enterprise repositories (subscription required) and add debian repositories so we can install some packages.\n1 2 3 4 5 6 7 8 9 # Note: connect to Proxmox host ssh -i homelab homelab@$PROXMOX_HOST sudo rm /etc/apt/apt.conf.d/10pveapthook sudo rm /etc/apt/sources.list.d/pve-enterprise.list echo \u0026#34;deb http://download.proxmox.com/debian/pve bookworm pve-no-subscription\u0026#34; | sudo tee /etc/apt/sources.list.d/proxmox.list sudo apt update sudo apt install -y libguestfs-tools Next, I download the Debian Cloud Image to the Proxmox host and use QEMU/KVM CLI tool (qm) to create a VM using ID of 9000, set up disks used by the VM and finally creating a template from the VM [2]. The virt-customize tool is used to install the guest agent software so Proxmox can receive information from the VM.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 IMG_URL=https://cloud.debian.org/images/cloud/bullseye/20230802-1460/debian-11-generic-amd64-20230802-1460.qcow2 # From https://cloud.debian.org/images/cloud/bullseye/20230802-1460/ # Needs to be updated occasionally. wget -O /tmp/debian-server.img $IMG_URL virt-customize -a /tmp/debian-server.img --install qemu-guest-agent sudo qm create 9000 --memory 2048 --name debian-cloudimage \\ --agent enabled=1 \\ --net0 virtio,bridge=vmbr0 sudo qm importdisk 9000 /tmp/debian-server.img local-lvm sudo qm set 9000 --scsihw virtio-scsi-pci --scsi0 local-lvm:vm-9000-disk-0 sudo qm set 9000 --ide2 local-lvm:cloudinit sudo qm set 9000 --boot c --bootdisk scsi0 sudo qm set 9000 --serial0 socket --vga serial0 sudo qm template 9000 The created VM template should be listed on the Proxmox web interface.\nProxmox - Virtual Machine Creation After the VM Template is available on the Proxmox host a single VM is created with a static IP address and the SSH key of the homelab user for accessing the VM once it is created. The qm set commands configure the VM to use a specific IP address (please change this to suit your network requirements), network gateway, CPU and RAM, and public ssh key. Finally the root volume of the VM is resized to 50GB and the VM is started.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 VM_ID=9100 sudo qm clone 9000 $VM_ID \\ --name runner \\ --full sudo qm set $VM_ID --cores 2 --memory 4096 sudo qm set $VM_ID --ipconfig0 ip=192.168.1.15/24,gw=192.168.1.1 sudo qm set $VM_ID --sshkey ~/homelab.pub sudo qm set $VM_ID --nameserver 1.1.1.1 sudo qm set $VM_ID --ciuser admin sudo qm resize $VM_ID scsi0 +50G sudo qm start $VM_ID Runner Virtual Machine - Self-hosted Runner Configuration For this example I will use the installation instructions provided by Github. These instructions are found by navigating to the Settings \u0026gt; Actions \u0026gt; Runner page in your repository and selecting \u0026ldquo;New self-hosted runner\u0026rdquo;.\nOn the following page grab the download and configuration commands and run those commands on the Proxmox VM runner.\n1 2 3 4 5 6 7 8 9 10 11 mkdir actions-runner \u0026amp;\u0026amp; cd actions-runner curl -o actions-runner-linux-x64-2.308.0.tar.gz -L https://github.com/actions/runner/releases/download/v2.308.0/actions-runner-linux-x64-2.308.0.tar.gz tar xzf ./actions-runner-linux-x64-2.308.0.tar.gz # Note: I have labelled the runner \u0026#34;homelab\u0026#34; by passing the `--labels homelab` flag during the configuration command. ./config.sh --unattended --labels homelab --url https://github.com/trwicks/homelab \\ --name homelab-runner --token \u0026lt;token\u0026gt; sudo ./svc.sh install sudo ./svc.sh start sudo ./svc.sh status If this has worked correctly the runner should be in an idle state.\nGithub - Create a Workflow Lastly, I want to create a Github Action to use the runner to run some simple commands.\nCreate the workflow template in your .github/workflows directory. The workflow template below runs every 5 minutes on the self-hosted runner labelled \u0026ldquo;homelab\u0026rdquo;. Every time the workflow is executed the self-hosted runner will run the commands ip addr; whoami and this will be displayed in the output section of the workflow on Github.\n1 2 3 4 5 6 7 8 9 10 11 name: project-1 on: schedule: - cron: \u0026#39;*/5 * * * *\u0026#39; # every 5 mins jobs: just-some-commands: runs-on: labels: homelab steps: - uses: actions/checkout@v3 - run: ip addr; whoami Commit and push the new workflow file up to your repository.\n1 2 3 git add .github/workflows/\u0026lt;workflow filename\u0026gt; git commit -m \u0026#34;Adding test workflow.\u0026#34; git push origin \u0026lt;your branch\u0026gt; From the Github Action console the Workflow should have been successfully run and outputs from the commands are displayed.\nProxmox - Remove Resources To remove the VM and VM template run the following commands from the homelab or root user on Proxmox.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 # Stop and destroy the Gitlab Runner VM qm stop 9001 qm destroy 9001 # Remove the created template qm destroy 9000 # Remove the homelab user pveum user delete homelab@pam userdel homelab pveum user list # Remove the homelab group pveum group delete homelabbers groupdel homelabbers pveum group list # Remove the workflow rm .github/workflows/\u0026lt;workflow filename\u0026gt; git add .github/workflows/\u0026lt;workflow filename\u0026gt; git commit -m \u0026#34;Removing test workflow.\u0026#34; git push origin \u0026lt;your branch\u0026gt; References [1] - Getting Started with Proxmox (Youtube) [2] - QEMU/KVM CLI docs [3] - Github Documentation - Self-hosted Runners [4] - Managing SSH Keys - Redhat ","date":"2023-09-11T00:00:00Z","image":"https://trwicks.github.io/p/homelab-project-1/images/server_hufbd4a20af7865966429aac76acda88ee_2900776_120x120_fill_box_smart1_3.png","permalink":"https://trwicks.github.io/p/homelab-project-1/","title":"Homelab - Self-hosted Github Runner"},{"content":" Do nothing which is of no use.\nMiyamoto Musashi, The Book of Five Rings (The Book of Earth) Not too long ago I suffered a few injuries, including a torn calf, pain in my lower back and left knee - and weakness in balance and flexibility that prevented me from training martial arts and weighlifting as usual. This period caused me to evaluate how and why I train, which led to three noticable areas that I want to change with my training into the future.\nThe first major change is not adding in too much training into each session. I loosely think that I would like to improve my 75% rather than my 100%. It allows me to enjoy training on a more regular basis than pushing yourself too hard where you dislike the thought of going back to the gym the next day. Up until recently I trained with the mindset of always trying to push myself as hard as I can each workout. While this is does yield results it comes with risk of injury or burnout that may not align with what you want to achieve. By holding back a bit I feel eager to do more at the end of the session and the same feeling persists the next day.\nThe second change is to focus on identifying and fixing weak areas. For me this is my glutes, hip flexors, and neglected core muscle groups. I spend a lot more time trying to identify areas that need improvement and then target those areas with different exercises, seeing what helps pain and mobility. I recently worked with a great physio has helped me identify issues in my hips and knee stability, so it is great to have additional members on your fitness team to help you out. By actively monitoring weak areas and trying fixing them I find that I am putting additional tools for the workout toolbox rather than the same old workout.\nFinally, it is worth actually asking why you are training in the first place. I see many people start out by formulating workout regimes to get healthy or to look better. These are great high level goals but it is worth continously listening to yourself and putting thought into refining your goals, so you have long to short term goals that allow you to grow in a desired direction. The ability to learn and grow as a person through exercise and martial arts is really important to me and at some stage I would like to have the ability to teach others what I know.\nFocus on fixing weakness would be my mantra these days. My big desire is to be training long into the future, not winning crossfit competitions. So it seems right to me now to stop, think and change how I do things to achieve these goals.\nThanks for reading.\n","date":"2023-08-23T00:00:00Z","image":"https://trwicks.github.io/p/training-1/bwdog_hu2f25d0c327c350253d20e74e5aee8ac2_3378157_120x120_fill_q75_box_smart1.jpg","permalink":"https://trwicks.github.io/p/training-1/","title":"Training Thoughts #1"},{"content":"Describing what I do for work in a casual conversation varies quite a lot these days. My response will depend on the background understanding of the audience. If I am honest, I say I work in \u0026ldquo;IT\u0026rdquo; and move on to more interesting conversation. But, I find what I do really interesting and it is about time I put some thought into explaining the jargon in tech so I can use the vernacular with more people. In this series of posts I will explain the terminology commonly used in wide world of technology to a person like my Mum. This kind of person is someone that gets pretty confused by these words and is at odds with computers at time.\nThe first word I want to have a crack at is the \u0026ldquo;cloud\u0026rdquo;. This word I think is the centre piece of tech jargon in the industry. The \u0026ldquo;Cloud\u0026rdquo; appears to denote some area of the IT landscape, but might just be well disguised marketing vocabulary. So, what exactly is the cloud?\nCynics that work in the industry describe the cloud has \u0026ldquo;someone else\u0026rsquo;s computer\u0026rdquo;.[1] This statement has some truth but trivialises the term \u0026ldquo;Cloud\u0026rdquo; and is not particularly helpful to the uninitiated. In a more optimistic sense, the cloud can be thought of as a third-party hosted platform that provides computing, storage and networking components. These building blocks of IT infrastructure can be arranged to run services for your company or project. And herein lies the problem: in attempting to describe the cloud in a technical sense an excessive amount of technology concepts (computers, networking, data centres, virtualisation, cloud providers etc) are glossed over. As a lay person I think you would stumble at every phrase in the definition on wikipedia.[2] These concepts themselves are abstractions of huge areas of computing. Each of these fundamentals need to be explained in sufficient detail for the non-technical audience to grasp why the cloud can be thought of as \u0026ldquo;someone else\u0026rsquo;s computer\u0026rdquo;. So in my opinion the cloud doesn\u0026rsquo;t really work as technical language. It attempts to abstract away way too many concepts, is highly subjective and just becomes very cloudy. This has lead me to better interpret the word from a different point of view.\nIf you look at the word \u0026ldquo;cloud\u0026rdquo; from a perspective of someone wanting to understand it as business concept and not a technical concept, the term becomes much easier comprehend:\nAt its most simplest: the cloud provides IT infrastructure to customers for much lower cost than trying to set the infrastructure up themselves.\nTo clarify: the cloud is a marketing term that describes a business model. The business model is providing IT infrastructure as different service offerings to paying customers so they can host services for their customers, and this allows the business using these services to benefit from the scale of the cloud provider and not having to manage the underlying physical IT infrastructure. A skim through the benefits of the cloud from a cloud provider (Microsoft) seems to add more weight to the business interpretation too.[3]\nI must apologise to my Mum here for misrepresenting what I do as a \u0026ldquo;cloud engineer\u0026rdquo;. It appears on my LinkedIn and I am sure I have used it once or twice in conversation. The cloud was a word crafted for discussions in boardrooms of executives rather than technical professionals. This also means that word really shouldn\u0026rsquo;t be aimed at customers of technology products either. In my opinion, I don\u0026rsquo;t think it is worth salvaging the word \u0026ldquo;cloud\u0026rdquo; for any meaningful interpretation in a technical context. Instead I think it is better to focus the other components of the cloud that are obfuscated away by the term. Networking, servers, storage and software are more worthy candidates for explanation as they stand up by themselves in describing the thing they represent, which I will attempt to describe in later posts in this series. Discussing these topics in an approachable way with non-technical people will help aid understanding of what people in the industry do, in the same way we have an appreciation of what doctors, carpenters and accountants do.\nAs a last aside, as I have worked in the tech industry, I think it is good to have a healthy appreciation for discerning what words are merely marketing buzzwords and which ones deserve your attention as being a part of the way you describe subjects in the field of technology. This is because the quality of your communication matters, as the cost of using marketing fluff words is less accurately describing the things you are truly passionate about.\nThank you for reading.\nReferences:\n[1] https://www.pluralsight.com/blog/cloud/cloud-is-just-someone-elses-computer [2] https://en.wikipedia.org/wiki/Cloud_computing [3] https://azure.microsoft.com/en-au/resources/cloud-computing-dictionary/what-is-cloud-computing#Benefits ","date":"2023-08-18T00:00:00Z","image":"https://trwicks.github.io/p/techsplanations-cloud/images/ttmountain_hu225f1b124b777ed82f0c445a676faee6_6119622_120x120_fill_q75_box_smart1.jpg","permalink":"https://trwicks.github.io/p/techsplanations-cloud/","title":"What is the \"Cloud\"?"}]